{"version":3,"sources":["components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","components/SettingsBtn/SettingsBtn.module.css","components/Timer/Timer.module.css","audio/bell.flac","components/InfoBtn/InfoBtn.module.css","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","components/Timer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","fontSize","Settings","title","active","onChange","backdrop","modal","content","InfoBtn","Info","Timer","useState","pomodoroInterval","setPomodoroInterval","shortBrake","setShortBrake","longBreak","setLongBreak","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","useEffect","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","blueBg","allowEnterKey","confirmButtonColor","redBg","minutes","floor","seconds","onModal","onInfo","document","body","classList","remove","add","total","getProgress","test","Button","size","variant","console","log","TextField","id","type","fullWidth","value","e","target","FormControlLabel","control","Checkbox","checked","label","color","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d75f6b72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__22WWc\",\"modal\":\"Settings_modal__aLzt_\",\"title\":\"Settings_title__1vAwZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__1kgYs\",\"modal\":\"Info_modal__v1Kuj\",\"title\":\"Info_title__13E8z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__6cHfg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Timer_test__1AD7X\"};","module.exports = __webpack_public_path__ + \"static/media/bell.525320df.flac\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__1u2oU\",\"icon\":\"InfoBtn_icon__zEB2m\"};","import React from 'react';\nimport './TimerDisplay.css';\n\nconst TimeDisplay = (props) => {\n    const radius = 150;\n    const stroke = 5;\n    const normalizedRadius = radius - stroke * 2;\n    const circumference = normalizedRadius * 2 * Math.PI;\n    const strokeDashoffset = circumference - (props.progress / 100) * circumference;\n\n    return (\n        <div className=\"TimeDisplay\">\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\n                <circle\n                    stroke=\"#ddd\"\n                    fill=\"#fff\"\n                    strokeWidth={stroke}\n                    r={normalizedRadius}\n                    cx={radius}\n                    cy={radius}\n                />\n                <circle\n                    stroke=\"#D9534F\"\n                    fill=\"transparent\"\n                    strokeWidth={stroke}\n                    strokeDasharray={circumference + ' ' + circumference}\n                    style={{ strokeDashoffset }}\n                    r={normalizedRadius}\n                    cx={radius}\n                    cy={radius}\n                />\n            </svg>\n            <div>\n                {props.children}\n                <p>Pomodoro Technique</p>\n            </div>\n        </div>\n    );\n};\n\nexport default TimeDisplay;\n","import React from 'react';\nimport css from './SettingsBtn.module.css';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nconst SettingsBtn = (props) => {\n    return (\n        <button onClick={props.onclick} className={css.btn}>\n            <SettingsIcon fontSize=\"large\"/>\n        </button>\n    )\n}\n\nexport default SettingsBtn;","import React from 'react';\nimport css from './Settings.module.css';\n\nfunction Settings({ title, active, children, onChange }) {\n  if (!active) {\n    return null;\n  }\n  return (\n    <div className={css.backdrop} >\n      <div className={css.modal}>\n        {title && <h2 className={css.title}>{title}</h2>}\n        <div className={css.content}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport css from './InfoBtn.module.css';\nimport InfoIcon from '@material-ui/icons/Info';\n\nconst InfoBtn = (props) => {\n    return (\n        <button onClick={props.onclick} className={css.btn}>\n            <InfoIcon fontSize=\"large\"/>\n        </button>\n    )\n}\n\nexport default InfoBtn;","import React from 'react';\nimport css from './Info.module.css';\n\nfunction Info({ title, active, children, onChange }) {\n  if (!active) {\n    return null;\n  }\n  return (\n    <div className={css.backdrop} >\n      <div className={css.modal}>\n        {title && <h2 className={css.title}>{title}</h2>}\n        <div className={css.content}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Info;\n","import React, { useState, useEffect } from \"react\";\nimport TimerDisplay from '../TimerDisplay';\nimport SettingsBtn from '../SettingsBtn';\nimport Settings from '../SettingsModal';\nimport css from './Timer.module.css';\nimport bellSound from '../../audio/bell.flac';\nimport Swal from 'sweetalert2';\nimport InfoBtn from '../InfoBtn';\nimport Info from '../InfoModal';\nimport { Button, FormControlLabel, Checkbox } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nfunction Timer() {\n  // Here are time value hooks \n  const [pomodoroInterval, setPomodoroInterval] = useState(25);\n  const [shortBrake, setShortBrake] = useState(5);\n  const [longBreak, setLongBreak] = useState(10);\n  const [pomodoros, setPomodoros] = useState(4);\n  const [autoPlay, setAutoPlay] = useState(true);\n\n  // Hooks for sounds\n  const [bell] = useState(new Audio(bellSound));\n\n  // Other hooks\n  const [time, setTime] = useState(pomodoroInterval * 60);\n  const [pomodoro, setPomodoro] = useState(1);\n  const [restFlag, setRestFlag] = useState(false);\n  const [buttonText, setButtonText] = useState(\"Pause\");\n  const [startStatus, setStartStatus] = useState(false);\n\n  // Hooks for Modals\n  const [settings, setSettings] = useState(false);\n  const [info, setInfo] = useState(false);\n\n  // Here is a temporary value for progress bar\n  const [temporary, setTemporary] = useState(pomodoroInterval)\n\n  useEffect(() => {\n    if (startStatus) {\n      if (buttonText === 'Pause') {\n        if (time !== 0) {\n          setTimeout(() => {\n            setTime(time - 1);\n          }, 1000);\n        } else {\n          bell.play()\n          pomodoroCount()\n        }\n      }\n    }\n  });\n\n  const start = () => {\n    console.log('test');\n    setStartStatus(true);\n  }\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time - minutes * 60;\n\n  function pomodoroCount() {\n    let pomodoroCount = pomodoro\n    let interval\n    let flag\n    if (pomodoro < pomodoros && !restFlag) {\n      interval = shortBrake\n      flag = true\n      setTemporary(shortBrake)\n\n      autoPlay === true &&\n        Swal.fire({\n          title: \"Time to have a rest\",\n          allowOutsideClick: false,\n          onOpen: () => { setButtonText(\"Continue\") },\n          onClose: () => {\n            setButtonText(\"Pause\")\n            blueBg()\n          },\n          allowEnterKey: true,\n          confirmButtonColor: \"red\"\n        })\n\n    } else if (pomodoro < pomodoros && restFlag) {\n      pomodoroCount = pomodoro + 1\n      interval = pomodoroInterval\n      flag = false\n      setTemporary(pomodoroInterval)\n\n      autoPlay === true &&\n        Swal.fire({\n          title: \"Time to work\",\n          allowOutsideClick: false,\n          onOpen: () => { setButtonText(\"Continue\") },\n          onClose: () => {\n            setButtonText(\"Pause\")\n            redBg()\n          },\n          allowEnterKey: true,\n          confirmButtonColor: \"blue\"\n        })\n\n\n    } else if (pomodoro >= pomodoros) {\n      pomodoroCount = 1\n      interval = longBreak\n      flag = true\n      setTemporary(longBreak)\n      blueBg()\n\n      autoPlay === true &&\n        Swal.fire({\n          title: \"Time to have the longest break\",\n          allowOutsideClick: false,\n          onOpen: () => { setButtonText(\"Continue\") },\n          onClose: () => { setButtonText(\"Pause\") },\n          allowEnterKey: true,\n          confirmButtonColor: \"red\"\n        })\n    }\n    setPomodoro(pomodoroCount)\n    setTime(interval * 60)\n    setRestFlag(flag)\n  }\n\n  function pauseAndResume() {\n    let newText\n    if (buttonText === 'Pause') {\n      newText = 'Continue'\n    } else {\n      newText = 'Pause'\n    }\n    setButtonText(newText)\n  }\n\n  // Func for progress bar\n  const getProgress = () => {\n    const current = time;\n    const total = temporary * 60;\n    return ((total - current) / total) * 100;\n  };\n\n  const onModal = () => {\n    return setSettings(true);\n  }\n\n  const onInfo = () => {\n    return setInfo(true);\n  }\n\n  const onCheckBox = () => {\n    return setAutoPlay(!autoPlay)\n  }\n\n  const reset = () => {\n    if (buttonText === \"Continue\") {\n      setStartStatus(false)\n      setRestFlag(false)\n      setTime((temporary) * 60)\n      setButtonText('Pause')\n    }\n  }\n\n  // Func for changing bg Color while a break\n  const blueBg = () => {\n    document.body.classList.remove('restout')\n    document.body.classList.add('workout')\n  }\n\n  const redBg = () => {\n    document.body.classList.remove('workout')\n    document.body.classList.add('restout')\n  }\n\n  return (\n    <div>\n      <InfoBtn onclick={onInfo} />\n      <SettingsBtn onclick={onModal} />\n\n      <TimerDisplay time={pomodoroInterval} progress={getProgress()}>\n        <h2 className={css.test}>{minutes < 10 ? `0${minutes}` : minutes} :  {seconds < 10 ? `0${seconds}` : seconds}</h2>\n      </TimerDisplay>\n      <br />\n\n      {\n        startStatus\n          ? <div>\n            <Button size=\"large\" variant=\"outlined\" onClick={pauseAndResume}>{buttonText}</Button>\n            <Button size=\"large\" title=\"Click <Pause> to reset\" onClick={reset}>Reset</Button>\n          </div>\n          : <Button variant=\"outlined\" onClick={start} size=\"large\">Start</Button>\n      }\n\n      <Settings active={settings} onChange={onModal}>\n        <h3>Settings</h3>\n        <div>Pomodoro</div>\n        <TextField id=\"standard-basic\"\n          variant=\"outlined\"\n          type=\"number\"\n          fullWidth\n          value={pomodoroInterval}\n          onChange={(e) => {\n            setPomodoroInterval(e.target.value)\n            setTime(e.target.value * 60)\n            setTemporary(e.target.value)\n          }} />\n\n        <div>Short Break</div>\n        <TextField id=\"standard-basic\"\n          variant=\"outlined\"\n          fullWidth\n          value={shortBrake}\n          onChange={(e) => setShortBrake(e.target.value)}\n          type=\"number\"\n        />\n\n        <div>Long Break</div>\n        <TextField id=\"standard-basic\"\n          variant=\"outlined\"\n          fullWidth\n          value={longBreak}\n          onChange={(e) => setLongBreak(e.target.value)}\n          type=\"number\"\n        />\n\n        <div>Pomodoro Count</div>\n        <TextField id=\"standard-basic\"\n          variant=\"outlined\"\n          fullWidth\n          value={pomodoros}\n          onChange={(e) => {\n            setPomodoros(e.target.value)\n            console.log('count');\n          }}\n          type=\"number\"\n        />\n\n        <FormControlLabel\n          control={<Checkbox checked={autoPlay} onChange={onCheckBox} value=\"checkedA\" />}\n          label=\"Auto Play without push notifications\"\n        />\n        <br />\n\n        <Button variant=\"outlined\" size=\"large\" color=\"primary\" onClick={() => setSettings(false)}>\n          All ok\n        </Button>\n      </Settings>\n\n      <Info active={info} onChange={onInfo}>\n        <h2>About Pomodoro Technique</h2>\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit.\n         Nihil labore sit quas nam repellat perspiciatis autem, distinctio\n         suscipit ex, quae in fuga?\n        <h2>Use Experience</h2>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Reiciendis aliquid cupiditate fugiat velit? Quam explicabo consequuntur,\n        odio non qui recusandae vitae dolore nam odit eius maxime maiores voluptate quaerat provident?\n        <br />\n        <br />\n        <Button variant=\"outlined\" size=\"large\"\n          onClick={() => {\n            setInfo(false)\n            setPomodoro(1)\n          }\n          }\n        >Close</Button>\n      </Info>\n    </div >\n  );\n}\n\nexport default Timer;","import React from 'react';\nimport './App.css';\nimport Timer from './components/Timer/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}